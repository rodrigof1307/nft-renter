// Generated by @wagmi/cli@0.1.15 on 5/29/2023 at 7:47:55 PM

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CollateralizedRentHolder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const collateralizedRentHolderABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_nftAddress", internalType: "address", type: "address" },
      { name: "_nftID", internalType: "uint256", type: "uint256" },
      { name: "_ratePerHour", internalType: "uint256", type: "uint256" },
      { name: "_collateralValue", internalType: "uint256", type: "uint256" },
      { name: "_marketplaceAddress", internalType: "address", type: "address" },
    ],
  },
  { type: "error", inputs: [], name: "CollateralizedRentHolder__CollateralAlreadyWithdrawn" },
  {
    type: "error",
    inputs: [{ name: "_currNFTOwner", internalType: "address", type: "address" }],
    name: "CollateralizedRentHolder__NFTNotOwnedByContract",
  },
  { type: "error", inputs: [], name: "CollateralizedRentHolder__NFTOwnedByContract" },
  {
    type: "error",
    inputs: [
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_currRentEndDate", internalType: "uint256", type: "uint256" },
    ],
    name: "CollateralizedRentHolder__RentalPeriodNotOver",
  },
  {
    type: "error",
    inputs: [
      { name: "_paidValue", internalType: "uint256", type: "uint256" },
      { name: "_hours", internalType: "uint256", type: "uint256" },
      { name: "_ratePerHour", internalType: "uint256", type: "uint256" },
      { name: "_collateralValue", internalType: "uint256", type: "uint256" },
    ],
    name: "CollateralizedRentHolder__UnsufficientValue",
  },
  {
    type: "error",
    inputs: [{ name: "_currNFTOwner", internalType: "address", type: "address" }],
    name: "GenericRentHolder__NFTNotOwnedByContract",
  },
  { type: "error", inputs: [], name: "GenericRentHolder__OnlyOwnerCanCall" },
  { type: "error", inputs: [], name: "GenericRentHolder__OnlyRenterCanCall" },
  { type: "error", inputs: [], name: "GenericRentHolder__RatePerHourNotGreaterThanZero" },
  {
    type: "error",
    inputs: [
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_currRentEndDate", internalType: "uint256", type: "uint256" },
    ],
    name: "GenericRentHolder__RentalPeriodNotOver",
  },
  {
    type: "error",
    inputs: [
      { name: "_withdrawValue", internalType: "uint256", type: "uint256" },
      { name: "_contractBalance", internalType: "uint256", type: "uint256" },
    ],
    name: "GenericRentHolder__WithdrawValueGreaterThanContractBalance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "NFTCollateralClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTPublished",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTRentalValuesChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "currRenter", internalType: "address", type: "address", indexed: true },
      { name: "currRentEndDate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "currRentPeriod", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTRented",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "NFTReturned",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTWithdrawn",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_newRatePerHour", internalType: "uint256", type: "uint256" },
      { name: "_newCollateralValue", internalType: "uint256", type: "uint256" },
    ],
    name: "changeRentalValues",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "claimCollateral", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrRenterInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.CurrRenterInfo",
        type: "tuple",
        components: [
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentNFTOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getRentInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo",
        type: "tuple",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "publishNFT", outputs: [] },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [{ name: "_hours", internalType: "uint8", type: "uint8" }],
    name: "rent",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "returnNFT", outputs: [] },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "withdrawNFT", outputs: [] },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketplaceTracker
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketplaceTrackerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_feePercentage", internalType: "uint256", type: "uint256" },
      { name: "_wrappedCollectionAddress", internalType: "address", type: "address" },
    ],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "addCollateralizedRentHolderSC", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "addNonCollateralizedRentHolderSC",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getFeeInfo",
    outputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getWrappedCollectionAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "listAllCollateralizedRelevantInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo[]",
        type: "tuple[]",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "listAllNonCollateralizedRelevantInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo[]",
        type: "tuple[]",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "listAllRelevantInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo[]",
        type: "tuple[]",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_lenter", internalType: "address", type: "address" }],
    name: "listLentedRelevantInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo[]",
        type: "tuple[]",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_renter", internalType: "address", type: "address" }],
    name: "listRentedRelevantInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo[]",
        type: "tuple[]",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "removeCollateralizedRentSC", outputs: [] },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "removeNonCollateralizedRentSC", outputs: [] },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GenericRentHolder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const genericRentHolderABI = [
  {
    type: "error",
    inputs: [{ name: "_currNFTOwner", internalType: "address", type: "address" }],
    name: "GenericRentHolder__NFTNotOwnedByContract",
  },
  { type: "error", inputs: [], name: "GenericRentHolder__OnlyOwnerCanCall" },
  { type: "error", inputs: [], name: "GenericRentHolder__RatePerHourNotGreaterThanZero" },
  {
    type: "error",
    inputs: [
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_currRentEndDate", internalType: "uint256", type: "uint256" },
    ],
    name: "GenericRentHolder__RentalPeriodNotOver",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTPublished",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTRentalValuesChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "currRenter", internalType: "address", type: "address", indexed: true },
      { name: "currRentEndDate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "currRentPeriod", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTRented",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTWithdrawn",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_newRatePerHour", internalType: "uint256", type: "uint256" },
      { name: "_newCollateralValue", internalType: "uint256", type: "uint256" },
    ],
    name: "changeRentalValues",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrRenterInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.CurrRenterInfo",
        type: "tuple",
        components: [
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentNFTOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getRentInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo",
        type: "tuple",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "publishNFT", outputs: [] },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [{ name: "_hours", internalType: "uint8", type: "uint8" }],
    name: "rent",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "withdrawNFT", outputs: [] },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CounterStrikeNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterStrikeNftABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "CounterStrikeNFT__MaxSupplyReached" },
  { type: "error", inputs: [], name: "CounterStrikeNFT__NFTAlreadyMinted" },
  { type: "error", inputs: [], name: "CounterStrikeNFT__NeedToPayUp" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_fromTokenId", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_toTokenId", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "BatchMetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256", indexed: false }],
    name: "MetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "count",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "uri", internalType: "string", type: "string" }],
    name: "isContentOwned",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [{ name: "recipient", internalType: "address", type: "address" }],
    name: "payToMint",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "uri", internalType: "string", type: "string" },
    ],
    name: "safeMint",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "withdraw", outputs: [] },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NonCollateralizedRentHolder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nonCollateralizedRentHolderABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_nftAddress", internalType: "address", type: "address" },
      { name: "_nftID", internalType: "uint256", type: "uint256" },
      { name: "_ratePerHour", internalType: "uint256", type: "uint256" },
      { name: "_marketplaceAddress", internalType: "address", type: "address" },
    ],
  },
  {
    type: "error",
    inputs: [{ name: "_currNFTOwner", internalType: "address", type: "address" }],
    name: "GenericRentHolder__NFTNotOwnedByContract",
  },
  { type: "error", inputs: [], name: "GenericRentHolder__OnlyOwnerCanCall" },
  { type: "error", inputs: [], name: "GenericRentHolder__RatePerHourNotGreaterThanZero" },
  {
    type: "error",
    inputs: [
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_currRentEndDate", internalType: "uint256", type: "uint256" },
    ],
    name: "GenericRentHolder__RentalPeriodNotOver",
  },
  {
    type: "error",
    inputs: [
      { name: "_withdrawValue", internalType: "uint256", type: "uint256" },
      { name: "_contractBalance", internalType: "uint256", type: "uint256" },
    ],
    name: "GenericRentHolder__WithdrawValueGreaterThanContractBalance",
  },
  {
    type: "error",
    inputs: [
      { name: "_blockTimestamp", internalType: "uint256", type: "uint256" },
      { name: "_currRentEndDate", internalType: "uint256", type: "uint256" },
    ],
    name: "NonCollateralizedRentHolder__RentalPeriodNotOver",
  },
  {
    type: "error",
    inputs: [
      { name: "_paidValue", internalType: "uint256", type: "uint256" },
      { name: "_hours", internalType: "uint256", type: "uint256" },
      { name: "_ratePerHour", internalType: "uint256", type: "uint256" },
    ],
    name: "NonCollateralizedRentHolder__UnsufficientValue",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTPublished",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTRentalValuesChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "currRenter", internalType: "address", type: "address", indexed: true },
      { name: "currRentEndDate", internalType: "uint256", type: "uint256", indexed: false },
      { name: "currRentPeriod", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTRented",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "nftOwner", internalType: "address", type: "address", indexed: false },
      { name: "nftAddress", internalType: "address", type: "address", indexed: true },
      { name: "nftID", internalType: "uint256", type: "uint256", indexed: true },
      { name: "s_ratePerHour", internalType: "uint256", type: "uint256", indexed: false },
      { name: "s_collateralValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "NFTWithdrawn",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_newRatePerHour", internalType: "uint256", type: "uint256" },
      { name: "_newCollateralValue", internalType: "uint256", type: "uint256" },
    ],
    name: "changeRentalValues",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrRenterInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.CurrRenterInfo",
        type: "tuple",
        components: [
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentNFTOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getRentInfo",
    outputs: [
      {
        name: "",
        internalType: "struct GenericRentHolder.RelevantRentInfo",
        type: "tuple",
        components: [
          { name: "rentHolderSC", internalType: "address", type: "address" },
          { name: "nftOwner", internalType: "address", type: "address" },
          { name: "nftAddress", internalType: "address", type: "address" },
          { name: "nftId", internalType: "uint256", type: "uint256" },
          { name: "ratePerHour", internalType: "uint256", type: "uint256" },
          { name: "collateralValue", internalType: "uint256", type: "uint256" },
          { name: "currRenter", internalType: "address", type: "address" },
          { name: "currRentEndDate", internalType: "uint256", type: "uint256" },
          { name: "currRentPeriod", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "publishNFT", outputs: [] },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [{ name: "_hours", internalType: "uint8", type: "uint8" }],
    name: "rent",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "withdrawNFT", outputs: [] },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WrappedNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const wrappedNftABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_fromTokenId", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_toTokenId", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "BatchMetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256", indexed: false }],
    name: "MetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "count",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "isTokenIDOwnerValid",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "uri", internalType: "string", type: "string" },
    ],
    name: "safeMint",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "tokenIDtoRentHolderSC",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC4906
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc4906ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_fromTokenId", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_toTokenId", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "BatchMetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256", indexed: false }],
    name: "MetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "operator", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "owner", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "operator", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "owner", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721URIStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UriStorageABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_fromTokenId", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_toTokenId", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "BatchMetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "_tokenId", internalType: "uint256", type: "uint256", indexed: false }],
    name: "MetadataUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "owner", internalType: "address", type: "address", indexed: true },
      { name: "operator", internalType: "address", type: "address", indexed: true },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "tokenId", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "operator", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "owner", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
] as const;
