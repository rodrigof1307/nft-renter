{
  "address": "0xE20943Ba186d1E75e51077745e453E1559413703",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_wrappedCollectionAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "addCollateralizedRentHolderSC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addNonCollateralizedRentHolderSC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWrappedCollectionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listAllCollateralizedRelevantInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rentHolderSC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratePerHour",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currRenter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "currRentEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currRentPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct GenericRentHolder.RelevantRentInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listAllNonCollateralizedRelevantInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rentHolderSC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratePerHour",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currRenter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "currRentEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currRentPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct GenericRentHolder.RelevantRentInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listAllRelevantInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rentHolderSC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratePerHour",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currRenter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "currRentEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currRentPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct GenericRentHolder.RelevantRentInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lenter",
          "type": "address"
        }
      ],
      "name": "listLentedRelevantInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rentHolderSC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratePerHour",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currRenter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "currRentEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currRentPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct GenericRentHolder.RelevantRentInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_renter",
          "type": "address"
        }
      ],
      "name": "listRentedRelevantInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "rentHolderSC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ratePerHour",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currRenter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "currRentEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currRentPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct GenericRentHolder.RelevantRentInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeCollateralizedRentSC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeNonCollateralizedRentSC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a6f811c81d82eb5ab58ea18d25d8e669b4c826eb00a8e97c140f108d06f3bb0",
  "receipt": {
    "to": null,
    "from": "0xB644206E908486c2A0eB547375C612A4BD3A2DCc",
    "contractAddress": "0xE20943Ba186d1E75e51077745e453E1559413703",
    "transactionIndex": 4,
    "gasUsed": "1094301",
    "logsBloom": "0x
    "blockHash": "0x8a480447a7be5ca719171741ef607954f03de72fc05ab872b7e0287502f87d91",
    "transactionHash": "0x1a6f811c81d82eb5ab58ea18d25d8e669b4c826eb00a8e97c140f108d06f3bb0",
    "logs": [],
    "blockNumber": 3596679,
    "cumulativeGasUsed": "1289353",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0x2fAe42D5da941c8aB2ECBE3cb9496d04b85CEd88"
  ],
  "numDeployments": 1,
  "solcInputHash": "0ae782473015a23312448accdcd73a24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wrappedCollectionAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addCollateralizedRentHolderSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addNonCollateralizedRentHolderSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWrappedCollectionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllCollateralizedRelevantInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rentHolderSC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currRenter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currRentEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currRentPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct GenericRentHolder.RelevantRentInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllNonCollateralizedRelevantInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rentHolderSC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currRenter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currRentEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currRentPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct GenericRentHolder.RelevantRentInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAllRelevantInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rentHolderSC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currRenter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currRentEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currRentPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct GenericRentHolder.RelevantRentInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lenter\",\"type\":\"address\"}],\"name\":\"listLentedRelevantInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rentHolderSC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currRenter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currRentEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currRentPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct GenericRentHolder.RelevantRentInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_renter\",\"type\":\"address\"}],\"name\":\"listRentedRelevantInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"rentHolderSC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currRenter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currRentEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currRentPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct GenericRentHolder.RelevantRentInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCollateralizedRentSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeNonCollateralizedRentSC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketplaceTracker.sol\":\"MarketplaceTracker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/GenericRentHolder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./MarketplaceTracker.sol\\\";\\nimport \\\"./WrappedNFT.sol\\\";\\n\\n/* Errors */\\nerror GenericRentHolder__RatePerHourNotGreaterThanZero();\\nerror GenericRentHolder__WithdrawValueGreaterThanContractBalance(uint _withdrawValue, uint _contractBalance);\\nerror GenericRentHolder__RentalPeriodNotOver(uint _blockTimestamp, uint _currRentEndDate);\\nerror GenericRentHolder__NFTNotOwnedByContract(address _currNFTOwner);\\nerror GenericRentHolder__OnlyOwnerCanCall();\\nerror GenericRentHolder__OnlyRenterCanCall();\\n\\nabstract contract GenericRentHolder {\\n  //Events\\n  event NFTPublished(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    uint s_ratePerHour,\\n    uint s_collateralValue\\n  );\\n\\n  event NFTRented(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    address indexed currRenter,\\n    uint currRentEndDate,\\n    uint currRentPeriod\\n  );\\n\\n  event NFTWithdrawn(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    uint s_ratePerHour,\\n    uint s_collateralValue\\n  );\\n\\n  event NFTRentalValuesChanged(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    uint s_ratePerHour,\\n    uint s_collateralValue\\n  );\\n\\n  // State variables\\n  address internal immutable i_nftOwner;\\n  address internal immutable i_nftAddress;\\n  uint internal immutable i_nftId;\\n\\n  uint internal s_ratePerHour;\\n  uint internal s_collateralValue;\\n\\n  address internal s_currRenter;\\n  uint internal s_currRentEndDate;\\n  uint internal s_currRentPeriod;\\n\\n  address internal i_marketplaceAddress;\\n  address internal i_wrappedCollectionAddress;\\n\\n  address private immutable i_feeCollector;\\n  uint private immutable i_feePercentage;\\n\\n  // Structs\\n  struct RelevantRentInfo {\\n    address rentHolderSC;\\n    address nftOwner;\\n    address nftAddress;\\n    uint nftId;\\n    uint ratePerHour;\\n    uint collateralValue;\\n    address currRenter;\\n    uint currRentEndDate;\\n    uint currRentPeriod;\\n  }\\n\\n  struct CurrRenterInfo {\\n    address currRenter;\\n    uint currRentEndDate;\\n  }\\n\\n  // Constructor\\n  constructor(address _nftAddress, uint _nftID, uint _ratePerHour, uint _collateralValue, address _marketplaceAddress) {\\n    if (_ratePerHour <= 0) {\\n      revert GenericRentHolder__RatePerHourNotGreaterThanZero();\\n    }\\n\\n    i_nftOwner = msg.sender;\\n    i_nftAddress = _nftAddress;\\n    i_nftId = _nftID;\\n    s_ratePerHour = _ratePerHour;\\n    s_collateralValue = _collateralValue;\\n    i_marketplaceAddress = _marketplaceAddress;\\n    i_wrappedCollectionAddress = MarketplaceTracker(_marketplaceAddress).getWrappedCollectionAddress();\\n    (i_feeCollector, i_feePercentage) = MarketplaceTracker(_marketplaceAddress).getFeeInfo();\\n  }\\n\\n  // Internal functions\\n  function processOwnerPayment(uint _totalValue) internal {\\n    if (_totalValue > address(this).balance) {\\n      revert GenericRentHolder__WithdrawValueGreaterThanContractBalance(_totalValue, address(this).balance);\\n    }\\n    payable(i_feeCollector).transfer((_totalValue * i_feePercentage) / 100);\\n    payable(i_nftOwner).transfer((_totalValue * (100 - i_feePercentage)) / 100);\\n  }\\n\\n  // Public functions\\n  function getCurrentNFTOwner() public view returns (address) {\\n    ERC721 nftContract = ERC721(i_nftAddress);\\n    address currNFTOwner = nftContract.ownerOf(i_nftId);\\n    return currNFTOwner;\\n  }\\n\\n  // External functions\\n  receive() external payable {}\\n\\n  function publishNFT() external {\\n    ERC721 token = ERC721(i_nftAddress);\\n    token.transferFrom(i_nftOwner, address(this), i_nftId);\\n\\n    MarketplaceTracker marketplaceTracker = MarketplaceTracker(i_marketplaceAddress);\\n    if (s_collateralValue > 0) {\\n      marketplaceTracker.addCollateralizedRentHolderSC();\\n    } else {\\n      marketplaceTracker.addNonCollateralizedRentHolderSC();\\n    }\\n\\n    emit NFTPublished(i_nftOwner, i_nftAddress, i_nftId, s_ratePerHour, s_collateralValue);\\n  }\\n\\n  function rent(uint8 _hours) external payable virtual {}\\n\\n  function withdrawNFT() external onlyOwner {\\n    if (block.timestamp < s_currRentEndDate) {\\n      revert GenericRentHolder__RentalPeriodNotOver(block.timestamp, s_currRentEndDate);\\n    }\\n    ERC721 nftContract = ERC721(i_nftAddress);\\n    address currNFTOwner = nftContract.ownerOf(i_nftId);\\n    if (currNFTOwner != address(this)) {\\n      revert GenericRentHolder__NFTNotOwnedByContract(currNFTOwner);\\n    }\\n\\n    nftContract.transferFrom(address(this), i_nftOwner, i_nftId);\\n\\n    MarketplaceTracker marketplaceTracker = MarketplaceTracker(i_marketplaceAddress);\\n    if (s_collateralValue > 0) {\\n      marketplaceTracker.removeCollateralizedRentSC();\\n    } else {\\n      marketplaceTracker.removeNonCollateralizedRentSC();\\n    }\\n\\n    emit NFTWithdrawn(i_nftOwner, i_nftAddress, i_nftId, s_ratePerHour, s_collateralValue);\\n  }\\n\\n  function changeRentalValues(uint _newRatePerHour, uint _newCollateralValue) external onlyOwner {\\n    s_ratePerHour = _newRatePerHour;\\n    s_collateralValue = _newCollateralValue;\\n\\n    emit NFTRentalValuesChanged(i_nftOwner, i_nftAddress, i_nftId, s_ratePerHour, s_collateralValue);\\n  }\\n\\n  function getRentInfo() external view returns (RelevantRentInfo memory) {\\n    return\\n      RelevantRentInfo(\\n        address(this),\\n        i_nftOwner,\\n        i_nftAddress,\\n        i_nftId,\\n        s_ratePerHour,\\n        s_collateralValue,\\n        s_currRenter,\\n        s_currRentEndDate,\\n        s_currRentPeriod\\n      );\\n  }\\n\\n  function getCurrRenterInfo() external view returns (CurrRenterInfo memory) {\\n    return CurrRenterInfo(s_currRenter, s_currRentEndDate);\\n  }\\n\\n  // Modifiers\\n  modifier onlyOwner() {\\n    if (msg.sender != i_nftOwner) {\\n      revert GenericRentHolder__OnlyOwnerCanCall();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyRenter() {\\n    if (msg.sender != s_currRenter) {\\n      revert GenericRentHolder__OnlyRenterCanCall();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x08cac9776644d0a14db59975f134f9dadf1104671c82459251633b2d3efb2bcc\",\"license\":\"UNLICENSED\"},\"contracts/MarketplaceTracker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GenericRentHolder.sol\\\";\\n\\ncontract MarketplaceTracker {\\n  // State Variables\\n  address private immutable i_feeCollector;\\n  uint private immutable i_feePercentage;\\n  address private immutable i_wrappedCollectionAddress;\\n\\n  address[] private s_collateralizedRentHolderSCs;\\n  address[] private s_nonCollateralizedRentHolderSCs;\\n\\n  // Constructor\\n  constructor(uint _feePercentage, address _wrappedCollectionAddress) {\\n    i_feeCollector = msg.sender;\\n    i_feePercentage = _feePercentage;\\n    i_wrappedCollectionAddress = _wrappedCollectionAddress;\\n  }\\n\\n  // Internal & Private Functions\\n  function _removeRentHolder(address[] storage _rentHolderSCs) internal {\\n    uint length = _rentHolderSCs.length;\\n    for (uint i = 0; i < length; i++) {\\n      if (_rentHolderSCs[i] == msg.sender) {\\n        _rentHolderSCs[i] = _rentHolderSCs[length - 1];\\n        _rentHolderSCs.pop();\\n        break;\\n      }\\n    }\\n  }\\n\\n  function _compareStrings(string memory _a, string memory _b) internal pure returns (bool) {\\n    return (keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b))));\\n  }\\n\\n  function _listRelevantInfoHelperFilter(\\n    GenericRentHolder.RelevantRentInfo memory _rentInfo,\\n    string memory _mode,\\n    bool _collateralized,\\n    address _actor\\n  ) internal view returns (bool) {\\n    if (_compareStrings(_mode, \\\"lented\\\")) {\\n      return _rentInfo.nftOwner == _actor;\\n    } else if (_compareStrings(_mode, \\\"rented\\\") && !_collateralized) {\\n      return _rentInfo.currRenter == _actor && _rentInfo.currRentEndDate > block.timestamp;\\n    } else if (_compareStrings(_mode, \\\"rented\\\") && _collateralized) {\\n      return _rentInfo.currRenter == _actor;\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  function _listRelevantInfo(\\n    bool _collateralized,\\n    bool _nonCollateralized,\\n    string memory _mode,\\n    address _actor\\n  ) internal view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    GenericRentHolder.RelevantRentInfo[] memory helperRentInfoArray = new GenericRentHolder.RelevantRentInfo[](\\n      s_collateralizedRentHolderSCs.length + s_nonCollateralizedRentHolderSCs.length\\n    );\\n    uint count = 0;\\n    if (_collateralized) {\\n      uint collateralizedLength = s_collateralizedRentHolderSCs.length;\\n      for (uint i = 0; i < collateralizedLength; i++) {\\n        GenericRentHolder.RelevantRentInfo memory rentInfo = GenericRentHolder(\\n          payable(s_collateralizedRentHolderSCs[i])\\n        ).getRentInfo();\\n        if (_listRelevantInfoHelperFilter(rentInfo, _mode, true, _actor)) {\\n          helperRentInfoArray[count] = rentInfo;\\n          count++;\\n        }\\n      }\\n    }\\n    if (_nonCollateralized) {\\n      uint nonCollateralizedLength = s_nonCollateralizedRentHolderSCs.length;\\n      for (uint i = 0; i < nonCollateralizedLength; i++) {\\n        GenericRentHolder.RelevantRentInfo memory rentInfo = GenericRentHolder(\\n          payable(s_nonCollateralizedRentHolderSCs[i])\\n        ).getRentInfo();\\n        if (_listRelevantInfoHelperFilter(rentInfo, _mode, false, _actor)) {\\n          helperRentInfoArray[count] = rentInfo;\\n          count++;\\n        }\\n      }\\n    }\\n    GenericRentHolder.RelevantRentInfo[] memory rentInfoArray = new GenericRentHolder.RelevantRentInfo[](count);\\n    for (uint i = 0; i < count; i++) {\\n      rentInfoArray[i] = helperRentInfoArray[i];\\n    }\\n    return rentInfoArray;\\n  }\\n\\n  // External & Public Functions\\n  function getFeeInfo() external view returns (address, uint) {\\n    return (i_feeCollector, i_feePercentage);\\n  }\\n\\n  function getWrappedCollectionAddress() external view returns (address) {\\n    return i_wrappedCollectionAddress;\\n  }\\n\\n  function addCollateralizedRentHolderSC() external {\\n    s_collateralizedRentHolderSCs.push(msg.sender);\\n  }\\n\\n  function addNonCollateralizedRentHolderSC() external {\\n    s_nonCollateralizedRentHolderSCs.push(msg.sender);\\n  }\\n\\n  function removeCollateralizedRentSC() external {\\n    _removeRentHolder(s_collateralizedRentHolderSCs);\\n  }\\n\\n  function removeNonCollateralizedRentSC() external {\\n    _removeRentHolder(s_nonCollateralizedRentHolderSCs);\\n  }\\n\\n  function listLentedRelevantInfo(address _lenter) external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, true, \\\"lented\\\", _lenter);\\n  }\\n\\n  function listRentedRelevantInfo(address _renter) external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, true, \\\"rented\\\", _renter);\\n  }\\n\\n  function listAllCollateralizedRelevantInfo() external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, false, \\\"none\\\", address(0));\\n  }\\n\\n  function listAllNonCollateralizedRelevantInfo() external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(false, true, \\\"none\\\", address(0));\\n  }\\n\\n  function listAllRelevantInfo() external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, true, \\\"none\\\", address(0));\\n  }\\n}\\n\",\"keccak256\":\"0x9981418dd3edb073703a1ff043216e98cb9b7059f74798dc79ba04a769e79995\",\"license\":\"UNLICENSED\"},\"contracts/WrappedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./GenericRentHolder.sol\\\";\\n\\ncontract WrappedNFT is ERC721, ERC721URIStorage, Ownable {\\n  using Counters for Counters.Counter;\\n\\n  // State variables\\n  Counters.Counter private _tokenIdCounter;\\n  mapping(uint256 => address) public tokenIDtoRentHolderSC;\\n\\n  // Constructor\\n  constructor() ERC721(\\\"Wrapped NFT - NFT Renter\\\", \\\"NFTR\\\") {}\\n\\n  // External functions\\n  function safeMint(address to, string memory uri) external {\\n    uint256 tokenId = _tokenIdCounter.current();\\n    _tokenIdCounter.increment();\\n    _safeMint(to, tokenId);\\n    _setTokenURI(tokenId, uri);\\n    tokenIDtoRentHolderSC[tokenId] = msg.sender;\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n    return super.tokenURI(tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721URIStorage) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  // Public functions\\n  function count() public view returns (uint256) {\\n    return _tokenIdCounter.current();\\n  }\\n\\n  function isTokenIDOwnerValid(uint256 tokenId) public view returns (bool) {\\n    GenericRentHolder.CurrRenterInfo memory _currRenterInfo = GenericRentHolder(payable(tokenIDtoRentHolderSC[tokenId]))\\n      .getCurrRenterInfo();\\n    return _currRenterInfo.currRenter == ownerOf(tokenId) && _currRenterInfo.currRentEndDate > block.timestamp;\\n  }\\n\\n  // Internal functions\\n  function _baseURI() internal pure override returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n    super._burn(tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0xe4e9271a1ae9a9f03e16a88dcd22f2648db0dbc8b8f0c4d595509f310ce337ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200149538038062001495833981810160405281019062000037919062000154565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508160a081815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050506200019b565b600080fd5b6000819050919050565b620000c981620000b4565b8114620000d557600080fd5b50565b600081519050620000e981620000be565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011c82620000ef565b9050919050565b6200012e816200010f565b81146200013a57600080fd5b50565b6000815190506200014e8162000123565b92915050565b600080604083850312156200016e576200016d620000af565b5b60006200017e85828601620000d8565b925050602062000191858286016200013d565b9150509250929050565b60805160a05160c0516112ca620001cb600039600061041e015260006101f2015260006101d101526112ca6000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80635da9a390116100715780635da9a390146101425780637ca72b3c1461014c5780638f2bf04b146101565780639f8ed60514610174578063bc69bfd214610192578063d08c6cca146101c2576100a8565b806202eab7146100ad5780631ad66a80146100cc578063309aa185146100ea578063340958dc1461011a5780634e36eb2c14610124575b600080fd5b6100b56101cc565b6040516100c3929190610c9c565b60405180910390f35b6100d4610219565b6040516100e19190610e4a565b60405180910390f35b61010460048036038101906100ff9190610ea7565b610263565b6040516101119190610e4a565b60405180910390f35b6101226102ae565b005b61012c610313565b6040516101399190610e4a565b60405180910390f35b61014a61035e565b005b61015461036a565b005b61015e6103cf565b60405161016b9190610e4a565b60405180910390f35b61017c61041a565b6040516101899190610ed4565b60405180910390f35b6101ac60048036038101906101a79190610ea7565b610442565b6040516101b99190610e4a565b60405180910390f35b6101ca61048d565b005b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b606061025e6001806040518060400160405280600481526020017f6e6f6e65000000000000000000000000000000000000000000000000000000008152506000610499565b905090565b60606102a76001806040518060400160405280600681526020017f6c656e746564000000000000000000000000000000000000000000000000000081525085610499565b9050919050565b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060610359600160006040518060400160405280600481526020017f6e6f6e65000000000000000000000000000000000000000000000000000000008152506000610499565b905090565b610368600061080e565b565b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060610415600060016040518060400160405280600481526020017f6e6f6e65000000000000000000000000000000000000000000000000000000008152506000610499565b905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60606104866001806040518060400160405280600681526020017f72656e746564000000000000000000000000000000000000000000000000000081525085610499565b9050919050565b610497600161080e565b565b606060006001805490506000805490506104b39190610f1e565b67ffffffffffffffff8111156104cc576104cb610f52565b5b60405190808252806020026020018201604052801561050557816020015b6104f2610b9e565b8152602001906001900390816104ea5790505b5090506000861561062c5760008080549050905060005b8181101561062957600080828154811061053957610538610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d506355c6040518163ffffffff1660e01b815260040161012060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190611133565b90506105e2818960018a61099a565b1561061557808585815181106105fb576105fa610f81565b5b6020026020010181905250838061061190611161565b9450505b50808061062190611161565b91505061051c565b50505b8515610750576000600180549050905060005b8181101561074d5760006001828154811061065d5761065c610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d506355c6040518163ffffffff1660e01b815260040161012060405180830381865afa1580156106d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f79190611133565b9050610706818960008a61099a565b15610739578085858151811061071f5761071e610f81565b5b6020026020010181905250838061073590611161565b9450505b50808061074590611161565b91505061063f565b50505b60008167ffffffffffffffff81111561076c5761076b610f52565b5b6040519080825280602002602001820160405280156107a557816020015b610792610b9e565b81526020019060019003908161078a5790505b50905060005b828110156107ff578381815181106107c6576107c5610f81565b5b60200260200101518282815181106107e1576107e0610f81565b5b602002602001018190525080806107f790611161565b9150506107ab565b50809350505050949350505050565b60008180549050905060005b81811015610995573373ffffffffffffffffffffffffffffffffffffffff1683828154811061084c5761084b610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361098257826001836108a091906111a9565b815481106108b1576108b0610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815481106108ef576108ee610f81565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480610948576109476111dd565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610995565b808061098d90611161565b91505061081a565b505050565b60006109db846040518060400160405280600681526020017f6c656e7465640000000000000000000000000000000000000000000000000000815250610b45565b15610a1a578173ffffffffffffffffffffffffffffffffffffffff16856020015173ffffffffffffffffffffffffffffffffffffffff16149050610b3d565b610a59846040518060400160405280600681526020017f72656e7465640000000000000000000000000000000000000000000000000000815250610b45565b8015610a63575082155b15610ab1578173ffffffffffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff16148015610aaa5750428560e00151115b9050610b3d565b610af0846040518060400160405280600681526020017f72656e7465640000000000000000000000000000000000000000000000000000815250610b45565b8015610af95750825b15610b38578173ffffffffffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff16149050610b3d565b600190505b949350505050565b600081604051602001610b58919061127d565b6040516020818303038152906040528051906020012083604051602001610b7f919061127d565b6040516020818303038152906040528051906020012014905092915050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6d82610c42565b9050919050565b610c7d81610c62565b82525050565b6000819050919050565b610c9681610c83565b82525050565b6000604082019050610cb16000830185610c74565b610cbe6020830184610c8d565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610cfa81610c62565b82525050565b610d0981610c83565b82525050565b61012082016000820151610d266000850182610cf1565b506020820151610d396020850182610cf1565b506040820151610d4c6040850182610cf1565b506060820151610d5f6060850182610d00565b506080820151610d726080850182610d00565b5060a0820151610d8560a0850182610d00565b5060c0820151610d9860c0850182610cf1565b5060e0820151610dab60e0850182610d00565b50610100820151610dc0610100850182610d00565b50505050565b6000610dd28383610d0f565b6101208301905092915050565b6000602082019050919050565b6000610df782610cc5565b610e018185610cd0565b9350610e0c83610ce1565b8060005b83811015610e3d578151610e248882610dc6565b9750610e2f83610ddf565b925050600181019050610e10565b5085935050505092915050565b60006020820190508181036000830152610e648184610dec565b905092915050565b6000604051905090565b600080fd5b610e8481610c62565b8114610e8f57600080fd5b50565b600081359050610ea181610e7b565b92915050565b600060208284031215610ebd57610ebc610e76565b5b6000610ecb84828501610e92565b91505092915050565b6000602082019050610ee96000830184610c74565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f2982610c83565b9150610f3483610c83565b9250828201905080821115610f4c57610f4b610eef565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b610fcf82610fb5565b810181811067ffffffffffffffff82111715610fee57610fed610f52565b5b80604052505050565b6000611001610e6c565b905061100d8282610fc6565b919050565b60008151905061102181610e7b565b92915050565b61103081610c83565b811461103b57600080fd5b50565b60008151905061104d81611027565b92915050565b6000610120828403121561106a57611069610fb0565b5b611075610120610ff7565b9050600061108584828501611012565b600083015250602061109984828501611012565b60208301525060406110ad84828501611012565b60408301525060606110c18482850161103e565b60608301525060806110d58482850161103e565b60808301525060a06110e98482850161103e565b60a08301525060c06110fd84828501611012565b60c08301525060e06111118482850161103e565b60e0830152506101006111268482850161103e565b6101008301525092915050565b6000610120828403121561114a57611149610e76565b5b600061115884828501611053565b91505092915050565b600061116c82610c83565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361119e5761119d610eef565b5b600182019050919050565b60006111b482610c83565b91506111bf83610c83565b92508282039050818111156111d7576111d6610eef565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015611240578082015181840152602081019050611225565b60008484015250505050565b60006112578261120c565b6112618185611217565b9350611271818560208601611222565b80840191505092915050565b6000611289828461124c565b91508190509291505056fea26469706673582212204a560f08b1f21fa5c112800ee396036242eee824613b5fa7223df9cbb7cc06ce64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c80635da9a390116100715780635da9a390146101425780637ca72b3c1461014c5780638f2bf04b146101565780639f8ed60514610174578063bc69bfd214610192578063d08c6cca146101c2576100a8565b806202eab7146100ad5780631ad66a80146100cc578063309aa185146100ea578063340958dc1461011a5780634e36eb2c14610124575b600080fd5b6100b56101cc565b6040516100c3929190610c9c565b60405180910390f35b6100d4610219565b6040516100e19190610e4a565b60405180910390f35b61010460048036038101906100ff9190610ea7565b610263565b6040516101119190610e4a565b60405180910390f35b6101226102ae565b005b61012c610313565b6040516101399190610e4a565b60405180910390f35b61014a61035e565b005b61015461036a565b005b61015e6103cf565b60405161016b9190610e4a565b60405180910390f35b61017c61041a565b6040516101899190610ed4565b60405180910390f35b6101ac60048036038101906101a79190610ea7565b610442565b6040516101b99190610e4a565b60405180910390f35b6101ca61048d565b005b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b606061025e6001806040518060400160405280600481526020017f6e6f6e65000000000000000000000000000000000000000000000000000000008152506000610499565b905090565b60606102a76001806040518060400160405280600681526020017f6c656e746564000000000000000000000000000000000000000000000000000081525085610499565b9050919050565b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060610359600160006040518060400160405280600481526020017f6e6f6e65000000000000000000000000000000000000000000000000000000008152506000610499565b905090565b610368600061080e565b565b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6060610415600060016040518060400160405280600481526020017f6e6f6e65000000000000000000000000000000000000000000000000000000008152506000610499565b905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60606104866001806040518060400160405280600681526020017f72656e746564000000000000000000000000000000000000000000000000000081525085610499565b9050919050565b610497600161080e565b565b606060006001805490506000805490506104b39190610f1e565b67ffffffffffffffff8111156104cc576104cb610f52565b5b60405190808252806020026020018201604052801561050557816020015b6104f2610b9e565b8152602001906001900390816104ea5790505b5090506000861561062c5760008080549050905060005b8181101561062957600080828154811061053957610538610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d506355c6040518163ffffffff1660e01b815260040161012060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190611133565b90506105e2818960018a61099a565b1561061557808585815181106105fb576105fa610f81565b5b6020026020010181905250838061061190611161565b9450505b50808061062190611161565b91505061051c565b50505b8515610750576000600180549050905060005b8181101561074d5760006001828154811061065d5761065c610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d506355c6040518163ffffffff1660e01b815260040161012060405180830381865afa1580156106d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f79190611133565b9050610706818960008a61099a565b15610739578085858151811061071f5761071e610f81565b5b6020026020010181905250838061073590611161565b9450505b50808061074590611161565b91505061063f565b50505b60008167ffffffffffffffff81111561076c5761076b610f52565b5b6040519080825280602002602001820160405280156107a557816020015b610792610b9e565b81526020019060019003908161078a5790505b50905060005b828110156107ff578381815181106107c6576107c5610f81565b5b60200260200101518282815181106107e1576107e0610f81565b5b602002602001018190525080806107f790611161565b9150506107ab565b50809350505050949350505050565b60008180549050905060005b81811015610995573373ffffffffffffffffffffffffffffffffffffffff1683828154811061084c5761084b610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361098257826001836108a091906111a9565b815481106108b1576108b0610f81565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168382815481106108ef576108ee610f81565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480610948576109476111dd565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610995565b808061098d90611161565b91505061081a565b505050565b60006109db846040518060400160405280600681526020017f6c656e7465640000000000000000000000000000000000000000000000000000815250610b45565b15610a1a578173ffffffffffffffffffffffffffffffffffffffff16856020015173ffffffffffffffffffffffffffffffffffffffff16149050610b3d565b610a59846040518060400160405280600681526020017f72656e7465640000000000000000000000000000000000000000000000000000815250610b45565b8015610a63575082155b15610ab1578173ffffffffffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff16148015610aaa5750428560e00151115b9050610b3d565b610af0846040518060400160405280600681526020017f72656e7465640000000000000000000000000000000000000000000000000000815250610b45565b8015610af95750825b15610b38578173ffffffffffffffffffffffffffffffffffffffff168560c0015173ffffffffffffffffffffffffffffffffffffffff16149050610b3d565b600190505b949350505050565b600081604051602001610b58919061127d565b6040516020818303038152906040528051906020012083604051602001610b7f919061127d565b6040516020818303038152906040528051906020012014905092915050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6d82610c42565b9050919050565b610c7d81610c62565b82525050565b6000819050919050565b610c9681610c83565b82525050565b6000604082019050610cb16000830185610c74565b610cbe6020830184610c8d565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610cfa81610c62565b82525050565b610d0981610c83565b82525050565b61012082016000820151610d266000850182610cf1565b506020820151610d396020850182610cf1565b506040820151610d4c6040850182610cf1565b506060820151610d5f6060850182610d00565b506080820151610d726080850182610d00565b5060a0820151610d8560a0850182610d00565b5060c0820151610d9860c0850182610cf1565b5060e0820151610dab60e0850182610d00565b50610100820151610dc0610100850182610d00565b50505050565b6000610dd28383610d0f565b6101208301905092915050565b6000602082019050919050565b6000610df782610cc5565b610e018185610cd0565b9350610e0c83610ce1565b8060005b83811015610e3d578151610e248882610dc6565b9750610e2f83610ddf565b925050600181019050610e10565b5085935050505092915050565b60006020820190508181036000830152610e648184610dec565b905092915050565b6000604051905090565b600080fd5b610e8481610c62565b8114610e8f57600080fd5b50565b600081359050610ea181610e7b565b92915050565b600060208284031215610ebd57610ebc610e76565b5b6000610ecb84828501610e92565b91505092915050565b6000602082019050610ee96000830184610c74565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f2982610c83565b9150610f3483610c83565b9250828201905080821115610f4c57610f4b610eef565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b610fcf82610fb5565b810181811067ffffffffffffffff82111715610fee57610fed610f52565b5b80604052505050565b6000611001610e6c565b905061100d8282610fc6565b919050565b60008151905061102181610e7b565b92915050565b61103081610c83565b811461103b57600080fd5b50565b60008151905061104d81611027565b92915050565b6000610120828403121561106a57611069610fb0565b5b611075610120610ff7565b9050600061108584828501611012565b600083015250602061109984828501611012565b60208301525060406110ad84828501611012565b60408301525060606110c18482850161103e565b60608301525060806110d58482850161103e565b60808301525060a06110e98482850161103e565b60a08301525060c06110fd84828501611012565b60c08301525060e06111118482850161103e565b60e0830152506101006111268482850161103e565b6101008301525092915050565b6000610120828403121561114a57611149610e76565b5b600061115884828501611053565b91505092915050565b600061116c82610c83565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361119e5761119d610eef565b5b600182019050919050565b60006111b482610c83565b91506111bf83610c83565b92508282039050818111156111d7576111d6610eef565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015611240578082015181840152602081019050611225565b60008484015250505050565b60006112578261120c565b6112618185611217565b9350611271818560208601611222565b80840191505092915050565b6000611289828461124c565b91508190509291505056fea26469706673582212204a560f08b1f21fa5c112800ee396036242eee824613b5fa7223df9cbb7cc06ce64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3881,
        "contract": "contracts/MarketplaceTracker.sol:MarketplaceTracker",
        "label": "s_collateralizedRentHolderSCs",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3884,
        "contract": "contracts/MarketplaceTracker.sol:MarketplaceTracker",
        "label": "s_nonCollateralizedRentHolderSCs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}