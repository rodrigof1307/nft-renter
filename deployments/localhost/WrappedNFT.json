{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenIDOwnerValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIDtoRentHolderSC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbfb0171db999dd0b89aa3751eadb284a4b9e9d6c3910906393a91bb18c8df48c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2873092",
    "logsBloom": "0x
    "blockHash": "0x356614e329aa8f21c52bf1121bf17d77e8dc462d3daa70076765c7bd5af385b4",
    "transactionHash": "0xbfb0171db999dd0b89aa3751eadb284a4b9e9d6c3910906393a91bb18c8df48c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xbfb0171db999dd0b89aa3751eadb284a4b9e9d6c3910906393a91bb18c8df48c",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x356614e329aa8f21c52bf1121bf17d77e8dc462d3daa70076765c7bd5af385b4"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "2873092",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0a5a3a4e251c4b4cc6b0696d8d0813d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenIDOwnerValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIDtoRentHolderSC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rodrigo Fernandes\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isTokenIDOwnerValid(uint256)\":{\"params\":{\"tokenId\":\"the ID of the NFT that is being checked\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeMint(address,string)\":{\"params\":{\"to\":\"the address of the renter\",\"uri\":\"the URI of the NFT that is being rented\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the ID of the interface that is being checked\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"the ID of the NFT that is being checked\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"An NFT that meant to mimic the metadata of an NFT that is being rented on the platform\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"count()\":{\"notice\":\"This function returns the number of NFTs that were minted\"},\"isTokenIDOwnerValid(uint256)\":{\"notice\":\"This function checks if the owner of the NFT is a valid renter of the rental contract that the NFT represents\"},\"safeMint(address,string)\":{\"notice\":\"This function mints an NFT with the metadata of a non-collateralized rental\"},\"supportsInterface(bytes4)\":{\"notice\":\"This function is used to check if a given interface is supported by the contract\"},\"tokenURI(uint256)\":{\"notice\":\"Get the token URI of a given NFT\"}},\"notice\":\"This contract is used to mint NFTs with the metadata of non-collateralized rentals. It also provides a function to check if the owner of the NFT is a valid renter of the rental contract that the NFT represents\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrappedNFT.sol\":\"WrappedNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/GenericRentHolder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./MarketplaceTracker.sol\\\";\\nimport \\\"./WrappedNFT.sol\\\";\\n\\n/* Errors */\\nerror GenericRentHolder__RatePerHourNotGreaterThanZero();\\nerror GenericRentHolder__WithdrawValueGreaterThanContractBalance(uint _withdrawValue, uint _contractBalance);\\nerror GenericRentHolder__RentalPeriodNotOver(uint _blockTimestamp, uint _currRentEndDate);\\nerror GenericRentHolder__NFTNotOwnedByContract(address _currNFTOwner);\\nerror GenericRentHolder__OnlyOwnerCanCall();\\nerror GenericRentHolder__OnlyRenterCanCall();\\n\\n/**\\n * @title A generic template for the escrow contract to aid NFT rentals\\n * @author Rodrigo Fernandes\\n * @notice This contract supports the basic setup and functionalities of an escrow contract for NFT rentals, considering both collateralized and non-collateralized rents\\n * @dev This contract is abstract and should be inherited by other contracts to create a completely functional rental escrow contract\\n */\\nabstract contract GenericRentHolder {\\n  //Events\\n  event NFTPublished(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    uint s_ratePerHour,\\n    uint s_collateralValue\\n  );\\n\\n  event NFTRented(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    address indexed currRenter,\\n    uint currRentEndDate,\\n    uint currRentPeriod\\n  );\\n\\n  event NFTWithdrawn(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    uint s_ratePerHour,\\n    uint s_collateralValue\\n  );\\n\\n  event NFTRentalValuesChanged(\\n    address nftOwner,\\n    address indexed nftAddress,\\n    uint indexed nftID,\\n    uint s_ratePerHour,\\n    uint s_collateralValue\\n  );\\n\\n  // State variables\\n  address internal immutable i_nftOwner;\\n  address internal immutable i_nftAddress;\\n  uint internal immutable i_nftId;\\n\\n  uint internal s_ratePerHour;\\n  uint internal s_collateralValue;\\n\\n  address internal s_currRenter;\\n  uint internal s_currRentEndDate;\\n  uint internal s_currRentPeriod;\\n\\n  address internal i_marketplaceAddress;\\n  address internal i_wrappedCollectionAddress;\\n\\n  address private immutable i_feeCollector;\\n  uint private immutable i_feePercentage;\\n\\n  // Structs\\n  struct RelevantRentInfo {\\n    address rentHolderSC;\\n    address nftOwner;\\n    address nftAddress;\\n    uint nftId;\\n    uint ratePerHour;\\n    uint collateralValue;\\n    address currRenter;\\n    uint currRentEndDate;\\n    uint currRentPeriod;\\n  }\\n\\n  struct CurrRenterInfo {\\n    address currRenter;\\n    uint currRentEndDate;\\n  }\\n\\n  // Constructor\\n  constructor(address _nftAddress, uint _nftID, uint _ratePerHour, uint _collateralValue, address _marketplaceAddress) {\\n    if (_ratePerHour <= 0) {\\n      revert GenericRentHolder__RatePerHourNotGreaterThanZero();\\n    }\\n\\n    i_nftOwner = msg.sender;\\n    i_nftAddress = _nftAddress;\\n    i_nftId = _nftID;\\n    s_ratePerHour = _ratePerHour;\\n    s_collateralValue = _collateralValue;\\n    i_marketplaceAddress = _marketplaceAddress;\\n    // This information is retrieved from the MarketplaceTracker contract\\n    i_wrappedCollectionAddress = MarketplaceTracker(_marketplaceAddress).getWrappedCollectionAddress();\\n    (i_feeCollector, i_feePercentage) = MarketplaceTracker(_marketplaceAddress).getFeeInfo();\\n  }\\n\\n  // Internal functions\\n  /**\\n   * @notice This function processes payments regarding the rental service. On every payment the fee collector receives the fee percentage and the NFT\\n   * owner receives the rest\\n   * @param _totalPaymentValue The total value to be processed\\n   */\\n  function processOwnerPayment(uint _totalPaymentValue) internal {\\n    if (_totalPaymentValue > address(this).balance) {\\n      revert GenericRentHolder__WithdrawValueGreaterThanContractBalance(_totalPaymentValue, address(this).balance);\\n    }\\n    payable(i_feeCollector).transfer((_totalPaymentValue * i_feePercentage) / 100);\\n    payable(i_nftOwner).transfer((_totalPaymentValue * (100 - i_feePercentage)) / 100);\\n  }\\n\\n  // Public functions\\n  /**\\n   * @notice this function returns the current account that is actually owning the NFT\\n   */\\n  function getCurrentNFTOwner() public view returns (address) {\\n    ERC721 nftContract = ERC721(i_nftAddress);\\n    address currNFTOwner = nftContract.ownerOf(i_nftId);\\n    return currNFTOwner;\\n  }\\n\\n  // External functions\\n  receive() external payable {}\\n\\n  /**\\n   * @notice This function publishes the NFT to be rented by transfering it to the escrow contract and updating the MarketplaceTracker contract\\n   */\\n  function publishNFT() external {\\n    ERC721 token = ERC721(i_nftAddress);\\n    token.transferFrom(i_nftOwner, address(this), i_nftId);\\n\\n    MarketplaceTracker marketplaceTracker = MarketplaceTracker(i_marketplaceAddress);\\n    if (s_collateralValue > 0) {\\n      marketplaceTracker.addCollateralizedRentHolderSC();\\n    } else {\\n      marketplaceTracker.addNonCollateralizedRentHolderSC();\\n    }\\n\\n    emit NFTPublished(i_nftOwner, i_nftAddress, i_nftId, s_ratePerHour, s_collateralValue);\\n  }\\n\\n  /**\\n   * @notice This function will perform the rental action\\n   * @param _hours The number of hours to rent the NFT\\n   * @dev This function is virtual and should be overriden by the inheriting contract in order to tailor it to the type of rental\\n   */\\n  function rent(uint8 _hours) external payable virtual {}\\n\\n  /**\\n   * @notice This function withdraws the NFT from the escrow contract to the owner and updates the MarketplaceTracker contract\\n   */\\n  function withdrawNFT() external onlyOwner {\\n    if (block.timestamp < s_currRentEndDate) {\\n      revert GenericRentHolder__RentalPeriodNotOver(block.timestamp, s_currRentEndDate);\\n    }\\n    ERC721 nftContract = ERC721(i_nftAddress);\\n    address currNFTOwner = nftContract.ownerOf(i_nftId);\\n    if (currNFTOwner != address(this)) {\\n      revert GenericRentHolder__NFTNotOwnedByContract(currNFTOwner);\\n    }\\n\\n    nftContract.transferFrom(address(this), i_nftOwner, i_nftId);\\n\\n    MarketplaceTracker marketplaceTracker = MarketplaceTracker(i_marketplaceAddress);\\n    if (s_collateralValue > 0) {\\n      marketplaceTracker.removeCollateralizedRentSC();\\n    } else {\\n      marketplaceTracker.removeNonCollateralizedRentSC();\\n    }\\n\\n    emit NFTWithdrawn(i_nftOwner, i_nftAddress, i_nftId, s_ratePerHour, s_collateralValue);\\n  }\\n\\n  /**\\n   * @notice This function changes the rental values\\n   * @param _newRatePerHour The new rate per hour\\n   * @param _newCollateralValue The new collateral value\\n   */\\n  function changeRentalValues(uint _newRatePerHour, uint _newCollateralValue) external onlyOwner {\\n    s_ratePerHour = _newRatePerHour;\\n    s_collateralValue = _newCollateralValue;\\n\\n    emit NFTRentalValuesChanged(i_nftOwner, i_nftAddress, i_nftId, s_ratePerHour, s_collateralValue);\\n  }\\n\\n  /**\\n   * @notice This function returns the important information about a given rental contract\\n   * @return The relevant rental information\\n   */\\n  function getRentInfo() external view returns (RelevantRentInfo memory) {\\n    return\\n      RelevantRentInfo(\\n        address(this),\\n        i_nftOwner,\\n        i_nftAddress,\\n        i_nftId,\\n        s_ratePerHour,\\n        s_collateralValue,\\n        s_currRenter,\\n        s_currRentEndDate,\\n        s_currRentPeriod\\n      );\\n  }\\n\\n  /**\\n   * @notice This function returns the current renter and the current rent end date\\n   * @return The current renter and the current rent end date\\n   */\\n  function getCurrRenterInfo() external view returns (CurrRenterInfo memory) {\\n    return CurrRenterInfo(s_currRenter, s_currRentEndDate);\\n  }\\n\\n  // Modifiers\\n  /**\\n   * @notice This modifier checks if the caller is the original NFT owner\\n   */\\n  modifier onlyOwner() {\\n    if (msg.sender != i_nftOwner) {\\n      revert GenericRentHolder__OnlyOwnerCanCall();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice This modifier checks if the caller is user that is currently renting the NFT\\n   */\\n  modifier onlyRenter() {\\n    if (msg.sender != s_currRenter) {\\n      revert GenericRentHolder__OnlyRenterCanCall();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x645b2e645f729e85dc14c1b60d6d49dbe55c532bb53920e805521f4214f8df94\",\"license\":\"UNLICENSED\"},\"contracts/MarketplaceTracker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./GenericRentHolder.sol\\\";\\n\\n/**\\n * @title This contract is used to track the rentals on the marketplace\\n * @author Rodrigo Fernandes\\n * @notice This contract supports the addition, removal and listing of rental contracts\\n */\\ncontract MarketplaceTracker {\\n  // State Variables\\n  address private immutable i_feeCollector;\\n  uint private immutable i_feePercentage;\\n  address private immutable i_wrappedCollectionAddress;\\n\\n  address[] private s_collateralizedRentHolderSCs;\\n  address[] private s_nonCollateralizedRentHolderSCs;\\n\\n  // Constructor\\n  constructor(uint _feePercentage, address _wrappedCollectionAddress) {\\n    i_feeCollector = msg.sender;\\n    i_feePercentage = _feePercentage;\\n    i_wrappedCollectionAddress = _wrappedCollectionAddress;\\n  }\\n\\n  // Internal & Private Functions\\n  /**\\n   * @notice This function handles the removal of the rent contract that called the funtion from a list of rent contracts\\n   * @param _rentHolderSCs the array from which the rent contract that called this function will be removed\\n   */\\n  function _removeRentHolder(address[] storage _rentHolderSCs) internal {\\n    uint length = _rentHolderSCs.length;\\n    for (uint i = 0; i < length; i++) {\\n      if (_rentHolderSCs[i] == msg.sender) {\\n        _rentHolderSCs[i] = _rentHolderSCs[length - 1];\\n        _rentHolderSCs.pop();\\n        break;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice This function comapres if two strings are equal\\n   * @param _a one of the strings to be compared\\n   * @param _b the other string to be compared\\n   * @return true if the strings are equal, false otherwise\\n   */\\n  function _compareStrings(string memory _a, string memory _b) internal pure returns (bool) {\\n    return (keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b))));\\n  }\\n\\n  /**\\n   * @notice This function provides a filter to decide if a given rent contract should be considered or not\\n   * @param _rentInfo the rent contract to be considered or not\\n   * @param _mode the mode under analysis. \\\"lented\\\" and \\\"rented\\\" have special considerations while other strings are treated as default\\n   * @param _collateralized a boolean indicating if the rent contract is collateralized or not\\n   * @param _actor the address of an actor that is under consideration to decide if the rent contract should be considered or not\\n   * @return true if the rent contract should be considered, false otherwise\\n   */\\n  function _listRelevantInfoHelperFilter(\\n    GenericRentHolder.RelevantRentInfo memory _rentInfo,\\n    string memory _mode,\\n    bool _collateralized,\\n    address _actor\\n  ) internal view returns (bool) {\\n    if (_compareStrings(_mode, \\\"lented\\\")) {\\n      return _rentInfo.nftOwner == _actor;\\n    } else if (_compareStrings(_mode, \\\"rented\\\") && !_collateralized) {\\n      return _rentInfo.currRenter == _actor && _rentInfo.currRentEndDate > block.timestamp;\\n    } else if (_compareStrings(_mode, \\\"rented\\\") && _collateralized) {\\n      return _rentInfo.currRenter == _actor;\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  /**\\n   * @notice This function lists the relevant information of the rent contracts\\n   * @param _collateralized a boolean indicating if the collateralized rent contracts should be considered or not\\n   * @param _nonCollateralized a boolean indicating if the non collateralized rent contracts should be considered or not\\n   * @param _mode the mode under analysis. \\\"lented\\\" and \\\"rented\\\" have special considerations while other strings are treated as default\\n   * @param _actor the address of an actor that is under consideration to decide if the rent contract should be considered or not\\n   * @return array of RelevantRentInfo structs who have passed the filter conditions\\n   */\\n  function _listRelevantInfo(\\n    bool _collateralized,\\n    bool _nonCollateralized,\\n    string memory _mode,\\n    address _actor\\n  ) internal view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    GenericRentHolder.RelevantRentInfo[] memory helperRentInfoArray = new GenericRentHolder.RelevantRentInfo[](\\n      s_collateralizedRentHolderSCs.length + s_nonCollateralizedRentHolderSCs.length\\n    );\\n    uint count = 0;\\n    if (_collateralized) {\\n      uint collateralizedLength = s_collateralizedRentHolderSCs.length;\\n      for (uint i = 0; i < collateralizedLength; i++) {\\n        GenericRentHolder.RelevantRentInfo memory rentInfo = GenericRentHolder(\\n          payable(s_collateralizedRentHolderSCs[i])\\n        ).getRentInfo();\\n        if (_listRelevantInfoHelperFilter(rentInfo, _mode, true, _actor)) {\\n          helperRentInfoArray[count] = rentInfo;\\n          count++;\\n        }\\n      }\\n    }\\n    if (_nonCollateralized) {\\n      uint nonCollateralizedLength = s_nonCollateralizedRentHolderSCs.length;\\n      for (uint i = 0; i < nonCollateralizedLength; i++) {\\n        GenericRentHolder.RelevantRentInfo memory rentInfo = GenericRentHolder(\\n          payable(s_nonCollateralizedRentHolderSCs[i])\\n        ).getRentInfo();\\n        if (_listRelevantInfoHelperFilter(rentInfo, _mode, false, _actor)) {\\n          helperRentInfoArray[count] = rentInfo;\\n          count++;\\n        }\\n      }\\n    }\\n    GenericRentHolder.RelevantRentInfo[] memory rentInfoArray = new GenericRentHolder.RelevantRentInfo[](count);\\n    for (uint i = 0; i < count; i++) {\\n      rentInfoArray[i] = helperRentInfoArray[i];\\n    }\\n    return rentInfoArray;\\n  }\\n\\n  // External & Public Functions\\n  /**\\n   * @notice This function returns relevant information about the fee dynamic\\n   * @return The fee collector address and the fee percentage\\n   */\\n  function getFeeInfo() external view returns (address, uint) {\\n    return (i_feeCollector, i_feePercentage);\\n  }\\n\\n  /**\\n   * @notice This function returns relevant information about the wrapped collection that is used on the non collateralized rentals\\n   * @return The wrapped collection address\\n   */\\n  function getWrappedCollectionAddress() external view returns (address) {\\n    return i_wrappedCollectionAddress;\\n  }\\n\\n  /**\\n   * @notice This function adds the calling contract to the list of collateralized rent contracts\\n   */\\n  function addCollateralizedRentHolderSC() external {\\n    s_collateralizedRentHolderSCs.push(msg.sender);\\n  }\\n\\n  /**\\n   * @notice This function adds the calling contract to the list of non collateralized rent contracts\\n   */\\n  function addNonCollateralizedRentHolderSC() external {\\n    s_nonCollateralizedRentHolderSCs.push(msg.sender);\\n  }\\n\\n  /**\\n   * @notice This function removes the calling contract from the list of collateralized rent contracts\\n   */\\n  function removeCollateralizedRentSC() external {\\n    _removeRentHolder(s_collateralizedRentHolderSCs);\\n  }\\n\\n  /**\\n   * @notice This function removes the calling contract from the list of non collateralized rent contracts\\n   */\\n  function removeNonCollateralizedRentSC() external {\\n    _removeRentHolder(s_nonCollateralizedRentHolderSCs);\\n  }\\n\\n  /**\\n   * @notice This function lists the relevant information of all the rent contracts that are lented by the caller\\n   * @return array of RelevantRentInfo structs who are lented by the caller\\n   */\\n  function listLentedRelevantInfo(address _lenter) external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, true, \\\"lented\\\", _lenter);\\n  }\\n\\n  /**\\n   * @notice This function lists the relevant information of all the rent contracts that are rented by the caller\\n   * @return array of RelevantRentInfo structs who are rented by the caller\\n   */\\n  function listRentedRelevantInfo(address _renter) external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, true, \\\"rented\\\", _renter);\\n  }\\n\\n  /**\\n   * @notice This function lists the relevant information of all rent contracts that are collateralized\\n   * @return array of RelevantRentInfo structs which are collateralized\\n   */\\n  function listAllCollateralizedRelevantInfo() external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, false, \\\"none\\\", address(0));\\n  }\\n\\n  /**\\n   * @notice This function lists the relevant information of all rent contracts that are not collateralized\\n   * @return array of RelevantRentInfo structs which are not collateralized\\n   */\\n  function listAllNonCollateralizedRelevantInfo() external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(false, true, \\\"none\\\", address(0));\\n  }\\n\\n  /**\\n   * @notice This function lists the relevant information of all rent contracts\\n   * @return array of all RelevantRentInfo structs which are on the marketplace\\n   */\\n  function listAllRelevantInfo() external view returns (GenericRentHolder.RelevantRentInfo[] memory) {\\n    return _listRelevantInfo(true, true, \\\"none\\\", address(0));\\n  }\\n}\\n\",\"keccak256\":\"0x8b526712b15c2f85c975a6185640d1a05441c81364abd8ea6d68ee5c0f710d48\",\"license\":\"UNLICENSED\"},\"contracts/WrappedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./GenericRentHolder.sol\\\";\\n\\n/**\\n * @title An NFT that meant to mimic the metadata of an NFT that is being rented on the platform\\n * @author Rodrigo Fernandes\\n * @notice This contract is used to mint NFTs with the metadata of non-collateralized rentals. It also provides a function to check if the owner\\n * of the NFT is a valid renter of the rental contract that the NFT represents\\n */\\ncontract WrappedNFT is ERC721, ERC721URIStorage, Ownable {\\n  using Counters for Counters.Counter;\\n\\n  // State variables\\n  Counters.Counter private _tokenIdCounter;\\n  mapping(uint256 => address) public tokenIDtoRentHolderSC;\\n\\n  // Constructor\\n  constructor() ERC721(\\\"Wrapped NFT - NFT Renter\\\", \\\"NFTR\\\") {}\\n\\n  // External functions\\n  /**\\n   * @notice This function mints an NFT with the metadata of a non-collateralized rental\\n   * @param to the address of the renter\\n   * @param uri the URI of the NFT that is being rented\\n   */\\n  function safeMint(address to, string memory uri) external {\\n    uint256 tokenId = _tokenIdCounter.current();\\n    _tokenIdCounter.increment();\\n    _safeMint(to, tokenId);\\n    _setTokenURI(tokenId, uri);\\n    tokenIDtoRentHolderSC[tokenId] = msg.sender;\\n  }\\n\\n  /**\\n   * Get the token URI of a given NFT\\n   * @param tokenId the ID of the NFT that is being checked\\n   */\\n  function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n    return super.tokenURI(tokenId);\\n  }\\n\\n  /**\\n   * @notice This function is used to check if a given interface is supported by the contract\\n   * @param interfaceId the ID of the interface that is being checked\\n   */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721URIStorage) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  // Public functions\\n  /**\\n   * @notice This function returns the number of NFTs that were minted\\n   */\\n  function count() public view returns (uint256) {\\n    return _tokenIdCounter.current();\\n  }\\n\\n  /**\\n   * @notice This function checks if the owner of the NFT is a valid renter of the rental contract that the NFT represents\\n   * @param tokenId the ID of the NFT that is being checked\\n   */\\n  function isTokenIDOwnerValid(uint256 tokenId) public view returns (bool) {\\n    GenericRentHolder.CurrRenterInfo memory _currRenterInfo = GenericRentHolder(payable(tokenIDtoRentHolderSC[tokenId]))\\n      .getCurrRenterInfo();\\n    return _currRenterInfo.currRenter == ownerOf(tokenId) && _currRenterInfo.currRentEndDate > block.timestamp;\\n  }\\n\\n  // Internal functions\\n  /**\\n   * @notice This function is used to set the base URI of the NFTs\\n   */\\n  function _baseURI() internal pure override returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @notice This function is used to burn an NFT\\n   * @param tokenId the ID of the NFT that is being burned\\n   */\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n    super._burn(tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x8b7195c1b464a50b92cdaac8e4b7a1b3bfdef6c15d6d8fc21ef5f4908409fa3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280601881526020017f57726170706564204e4654202d204e46542052656e74657200000000000000008152506040518060400160405280600481526020017f4e4654520000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000412565b508060019081620000a1919062000412565b505050620000c4620000b8620000ca60201b60201c565b620000d260201b60201c565b620004f9565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021a57607f821691505b60208210810362000230576200022f620001d2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025b565b620002a686836200025b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620002f3620002ed620002e784620002be565b620002c8565b620002be565b9050919050565b6000819050919050565b6200030f83620002d2565b620003276200031e82620002fa565b84845462000268565b825550505050565b600090565b6200033e6200032f565b6200034b81848462000304565b505050565b5b8181101562000373576200036760008262000334565b60018101905062000351565b5050565b601f821115620003c2576200038c8162000236565b62000397846200024b565b81016020851015620003a7578190505b620003bf620003b6856200024b565b83018262000350565b50505b505050565b600082821c905092915050565b6000620003e760001984600802620003c7565b1980831691505092915050565b6000620004028383620003d4565b9150826002028217905092915050565b6200041d8262000198565b67ffffffffffffffff811115620004395762000438620001a3565b5b62000445825462000201565b6200045282828562000377565b600060209050601f8311600181146200048a576000841562000475578287015190505b620004818582620003f4565b865550620004f1565b601f1984166200049a8662000236565b60005b82811015620004c4578489015182556001820191506020850194506020810190506200049d565b86831015620004e45784890151620004e0601f891682620003d4565b8355505b6001600288020188555050505b505050505050565b6131a380620005096000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063b88d4fde11610071578063b88d4fde14610343578063c87b56dd1461035f578063d204c45e1461038f578063e985e9c5146103ab578063f2fde38b146103db5761012c565b8063715018a6146102b15780638da5cb5b146102bb57806395d89b41146102d9578063a22cb465146102f7578063a7bd0593146103135761012c565b8063095ea7b3116100f4578063095ea7b3146101fd57806323b872dd1461021957806342842e0e146102355780636352211e1461025157806370a08231146102815761012c565b806301ffc9a71461013157806306661abd1461016157806306fdde031461017f578063081812fc1461019d578063088a52a7146101cd575b600080fd5b61014b60048036038101906101469190611ee8565b6103f7565b6040516101589190611f30565b60405180910390f35b610169610409565b6040516101769190611f64565b60405180910390f35b61018761041a565b604051610194919061200f565b60405180910390f35b6101b760048036038101906101b2919061205d565b6104ac565b6040516101c491906120cb565b60405180910390f35b6101e760048036038101906101e2919061205d565b6104f2565b6040516101f491906120cb565b60405180910390f35b61021760048036038101906102129190612112565b610525565b005b610233600480360381019061022e9190612152565b61063c565b005b61024f600480360381019061024a9190612152565b61069c565b005b61026b6004803603810190610266919061205d565b6106bc565b60405161027891906120cb565b60405180910390f35b61029b600480360381019061029691906121a5565b610742565b6040516102a89190611f64565b60405180910390f35b6102b96107f9565b005b6102c361080d565b6040516102d091906120cb565b60405180910390f35b6102e1610837565b6040516102ee919061200f565b60405180910390f35b610311600480360381019061030c91906121fe565b6108c9565b005b61032d6004803603810190610328919061205d565b6108df565b60405161033a9190611f30565b60405180910390f35b61035d60048036038101906103589190612373565b6109d7565b005b6103796004803603810190610374919061205d565b610a39565b604051610386919061200f565b60405180910390f35b6103a960048036038101906103a49190612497565b610a4b565b005b6103c560048036038101906103c091906124f3565b610ace565b6040516103d29190611f30565b60405180910390f35b6103f560048036038101906103f091906121a5565b610b62565b005b600061040282610be5565b9050919050565b60006104156008610c46565b905090565b60606000805461042990612562565b80601f016020809104026020016040519081016040528092919081815260200182805461045590612562565b80156104a25780601f10610477576101008083540402835291602001916104a2565b820191906000526020600020905b81548152906001019060200180831161048557829003601f168201915b5050505050905090565b60006104b782610c54565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610530826106bc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790612605565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105bf610c9f565b73ffffffffffffffffffffffffffffffffffffffff1614806105ee57506105ed816105e8610c9f565b610ace565b5b61062d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062490612697565b60405180910390fd5b6106378383610ca7565b505050565b61064d610647610c9f565b82610d60565b61068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390612729565b60405180910390fd5b610697838383610df5565b505050565b6106b7838383604051806020016040528060008152506109d7565b505050565b6000806106c8836110ee565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073090612795565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a990612827565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61080161112b565b61080b60006111a9565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461084690612562565b80601f016020809104026020016040519081016040528092919081815260200182805461087290612562565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905090565b6108db6108d4610c9f565b838361126f565b5050565b6000806009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b59e0526040518163ffffffff1660e01b81526004016040805180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098391906128c6565b905061098e836106bc565b73ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161480156109cf5750428160200151115b915050919050565b6109e86109e2610c9f565b83610d60565b610a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1e90612729565b60405180910390fd5b610a33848484846113db565b50505050565b6060610a4482611437565b9050919050565b6000610a576008610c46565b9050610a636008611549565b610a6d838261155f565b610a77818361157d565b336009600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610b6a61112b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612965565b60405180910390fd5b610be2816111a9565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c3f5750610c3e82611621565b5b9050919050565b600081600001549050919050565b610c5d81611703565b610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9390612795565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d1a836106bc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610d6c836106bc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dae5750610dad8185610ace565b5b80610dec57508373ffffffffffffffffffffffffffffffffffffffff16610dd4846104ac565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e15826106bc565b73ffffffffffffffffffffffffffffffffffffffff1614610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e62906129f7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed190612a89565b60405180910390fd5b610ee78383836001611744565b8273ffffffffffffffffffffffffffffffffffffffff16610f07826106bc565b73ffffffffffffffffffffffffffffffffffffffff1614610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f54906129f7565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46110e9838383600161174a565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611133610c9f565b73ffffffffffffffffffffffffffffffffffffffff1661115161080d565b73ffffffffffffffffffffffffffffffffffffffff16146111a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119e90612af5565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d490612b61565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113ce9190611f30565b60405180910390a3505050565b6113e6848484610df5565b6113f284848484611750565b611431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142890612bf3565b60405180910390fd5b50505050565b606061144282610c54565b600060066000848152602001908152602001600020805461146290612562565b80601f016020809104026020016040519081016040528092919081815260200182805461148e90612562565b80156114db5780601f106114b0576101008083540402835291602001916114db565b820191906000526020600020905b8154815290600101906020018083116114be57829003601f168201915b5050505050905060006114ec6118d7565b90506000815103611501578192505050611544565b60008251111561153657808260405160200161151e929190612c4f565b60405160208183030381529060405292505050611544565b61153f846118ee565b925050505b919050565b6001816000016000828254019250508190555050565b611579828260405180602001604052806000815250611956565b5050565b61158682611703565b6115c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bc90612ce5565b60405180910390fd5b806006600084815260200190815260200160002090816115e59190612eb1565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516116159190611f64565b60405180910390a15050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806116ec57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806116fc57506116fb826119b1565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611725836110ee565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006117718473ffffffffffffffffffffffffffffffffffffffff16611a1b565b156118ca578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261179a610c9f565b8786866040518563ffffffff1660e01b81526004016117bc9493929190612fd8565b6020604051808303816000875af19250505080156117f857506040513d601f19601f820116820180604052508101906117f59190613039565b60015b61187a573d8060008114611828576040519150601f19603f3d011682016040523d82523d6000602084013e61182d565b606091505b506000815103611872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186990612bf3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118cf565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606118f982610c54565b60006119036118d7565b90506000815111611923576040518060200160405280600081525061194e565b8061192d84611a3e565b60405160200161193e929190612c4f565b6040516020818303038152906040525b915050919050565b6119608383611b0c565b61196d6000848484611750565b6119ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a390612bf3565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001611a4d84611d29565b01905060008167ffffffffffffffff811115611a6c57611a6b612248565b5b6040519080825280601f01601f191660200182016040528015611a9e5781602001600182028036833780820191505090505b509050600082602001820190505b600115611b01578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611af557611af4613066565b5b04945060008503611aac575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b72906130e1565b60405180910390fd5b611b8481611703565b15611bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbb9061314d565b60405180910390fd5b611bd2600083836001611744565b611bdb81611703565b15611c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c129061314d565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d2560008383600161174a565b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611d87577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611d7d57611d7c613066565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611dc4576d04ee2d6d415b85acef81000000008381611dba57611db9613066565b5b0492506020810190505b662386f26fc100008310611df357662386f26fc100008381611de957611de8613066565b5b0492506010810190505b6305f5e1008310611e1c576305f5e1008381611e1257611e11613066565b5b0492506008810190505b6127108310611e41576127108381611e3757611e36613066565b5b0492506004810190505b60648310611e645760648381611e5a57611e59613066565b5b0492506002810190505b600a8310611e73576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ec581611e90565b8114611ed057600080fd5b50565b600081359050611ee281611ebc565b92915050565b600060208284031215611efe57611efd611e86565b5b6000611f0c84828501611ed3565b91505092915050565b60008115159050919050565b611f2a81611f15565b82525050565b6000602082019050611f456000830184611f21565b92915050565b6000819050919050565b611f5e81611f4b565b82525050565b6000602082019050611f796000830184611f55565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fb9578082015181840152602081019050611f9e565b60008484015250505050565b6000601f19601f8301169050919050565b6000611fe182611f7f565b611feb8185611f8a565b9350611ffb818560208601611f9b565b61200481611fc5565b840191505092915050565b600060208201905081810360008301526120298184611fd6565b905092915050565b61203a81611f4b565b811461204557600080fd5b50565b60008135905061205781612031565b92915050565b60006020828403121561207357612072611e86565b5b600061208184828501612048565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120b58261208a565b9050919050565b6120c5816120aa565b82525050565b60006020820190506120e060008301846120bc565b92915050565b6120ef816120aa565b81146120fa57600080fd5b50565b60008135905061210c816120e6565b92915050565b6000806040838503121561212957612128611e86565b5b6000612137858286016120fd565b925050602061214885828601612048565b9150509250929050565b60008060006060848603121561216b5761216a611e86565b5b6000612179868287016120fd565b935050602061218a868287016120fd565b925050604061219b86828701612048565b9150509250925092565b6000602082840312156121bb576121ba611e86565b5b60006121c9848285016120fd565b91505092915050565b6121db81611f15565b81146121e657600080fd5b50565b6000813590506121f8816121d2565b92915050565b6000806040838503121561221557612214611e86565b5b6000612223858286016120fd565b9250506020612234858286016121e9565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61228082611fc5565b810181811067ffffffffffffffff8211171561229f5761229e612248565b5b80604052505050565b60006122b2611e7c565b90506122be8282612277565b919050565b600067ffffffffffffffff8211156122de576122dd612248565b5b6122e782611fc5565b9050602081019050919050565b82818337600083830152505050565b6000612316612311846122c3565b6122a8565b90508281526020810184848401111561233257612331612243565b5b61233d8482856122f4565b509392505050565b600082601f83011261235a5761235961223e565b5b813561236a848260208601612303565b91505092915050565b6000806000806080858703121561238d5761238c611e86565b5b600061239b878288016120fd565b94505060206123ac878288016120fd565b93505060406123bd87828801612048565b925050606085013567ffffffffffffffff8111156123de576123dd611e8b565b5b6123ea87828801612345565b91505092959194509250565b600067ffffffffffffffff82111561241157612410612248565b5b61241a82611fc5565b9050602081019050919050565b600061243a612435846123f6565b6122a8565b90508281526020810184848401111561245657612455612243565b5b6124618482856122f4565b509392505050565b600082601f83011261247e5761247d61223e565b5b813561248e848260208601612427565b91505092915050565b600080604083850312156124ae576124ad611e86565b5b60006124bc858286016120fd565b925050602083013567ffffffffffffffff8111156124dd576124dc611e8b565b5b6124e985828601612469565b9150509250929050565b6000806040838503121561250a57612509611e86565b5b6000612518858286016120fd565b9250506020612529858286016120fd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061257a57607f821691505b60208210810361258d5761258c612533565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006125ef602183611f8a565b91506125fa82612593565b604082019050919050565b6000602082019050818103600083015261261e816125e2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612681603d83611f8a565b915061268c82612625565b604082019050919050565b600060208201905081810360008301526126b081612674565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612713602d83611f8a565b915061271e826126b7565b604082019050919050565b6000602082019050818103600083015261274281612706565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061277f601883611f8a565b915061278a82612749565b602082019050919050565b600060208201905081810360008301526127ae81612772565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612811602983611f8a565b915061281c826127b5565b604082019050919050565b6000602082019050818103600083015261284081612804565b9050919050565b600080fd5b60008151905061285b816120e6565b92915050565b60008151905061287081612031565b92915050565b60006040828403121561288c5761288b612847565b5b61289660406122a8565b905060006128a68482850161284c565b60008301525060206128ba84828501612861565b60208301525092915050565b6000604082840312156128dc576128db611e86565b5b60006128ea84828501612876565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061294f602683611f8a565b915061295a826128f3565b604082019050919050565b6000602082019050818103600083015261297e81612942565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006129e1602583611f8a565b91506129ec82612985565b604082019050919050565b60006020820190508181036000830152612a10816129d4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a73602483611f8a565b9150612a7e82612a17565b604082019050919050565b60006020820190508181036000830152612aa281612a66565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612adf602083611f8a565b9150612aea82612aa9565b602082019050919050565b60006020820190508181036000830152612b0e81612ad2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612b4b601983611f8a565b9150612b5682612b15565b602082019050919050565b60006020820190508181036000830152612b7a81612b3e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612bdd603283611f8a565b9150612be882612b81565b604082019050919050565b60006020820190508181036000830152612c0c81612bd0565b9050919050565b600081905092915050565b6000612c2982611f7f565b612c338185612c13565b9350612c43818560208601611f9b565b80840191505092915050565b6000612c5b8285612c1e565b9150612c678284612c1e565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612ccf602e83611f8a565b9150612cda82612c73565b604082019050919050565b60006020820190508181036000830152612cfe81612cc2565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d2a565b612d718683612d2a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612dae612da9612da484611f4b565b612d89565b611f4b565b9050919050565b6000819050919050565b612dc883612d93565b612ddc612dd482612db5565b848454612d37565b825550505050565b600090565b612df1612de4565b612dfc818484612dbf565b505050565b5b81811015612e2057612e15600082612de9565b600181019050612e02565b5050565b601f821115612e6557612e3681612d05565b612e3f84612d1a565b81016020851015612e4e578190505b612e62612e5a85612d1a565b830182612e01565b50505b505050565b600082821c905092915050565b6000612e8860001984600802612e6a565b1980831691505092915050565b6000612ea18383612e77565b9150826002028217905092915050565b612eba82611f7f565b67ffffffffffffffff811115612ed357612ed2612248565b5b612edd8254612562565b612ee8828285612e24565b600060209050601f831160018114612f1b5760008415612f09578287015190505b612f138582612e95565b865550612f7b565b601f198416612f2986612d05565b60005b82811015612f5157848901518255600182019150602085019450602081019050612f2c565b86831015612f6e5784890151612f6a601f891682612e77565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612faa82612f83565b612fb48185612f8e565b9350612fc4818560208601611f9b565b612fcd81611fc5565b840191505092915050565b6000608082019050612fed60008301876120bc565b612ffa60208301866120bc565b6130076040830185611f55565b81810360608301526130198184612f9f565b905095945050505050565b60008151905061303381611ebc565b92915050565b60006020828403121561304f5761304e611e86565b5b600061305d84828501613024565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006130cb602083611f8a565b91506130d682613095565b602082019050919050565b600060208201905081810360008301526130fa816130be565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613137601c83611f8a565b915061314282613101565b602082019050919050565b600060208201905081810360008301526131668161312a565b905091905056fea2646970667358221220f5a7df799ead42c44fb4606fc4e2bd793f62401d4effe9b64ba4c169a4c09c9364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063b88d4fde11610071578063b88d4fde14610343578063c87b56dd1461035f578063d204c45e1461038f578063e985e9c5146103ab578063f2fde38b146103db5761012c565b8063715018a6146102b15780638da5cb5b146102bb57806395d89b41146102d9578063a22cb465146102f7578063a7bd0593146103135761012c565b8063095ea7b3116100f4578063095ea7b3146101fd57806323b872dd1461021957806342842e0e146102355780636352211e1461025157806370a08231146102815761012c565b806301ffc9a71461013157806306661abd1461016157806306fdde031461017f578063081812fc1461019d578063088a52a7146101cd575b600080fd5b61014b60048036038101906101469190611ee8565b6103f7565b6040516101589190611f30565b60405180910390f35b610169610409565b6040516101769190611f64565b60405180910390f35b61018761041a565b604051610194919061200f565b60405180910390f35b6101b760048036038101906101b2919061205d565b6104ac565b6040516101c491906120cb565b60405180910390f35b6101e760048036038101906101e2919061205d565b6104f2565b6040516101f491906120cb565b60405180910390f35b61021760048036038101906102129190612112565b610525565b005b610233600480360381019061022e9190612152565b61063c565b005b61024f600480360381019061024a9190612152565b61069c565b005b61026b6004803603810190610266919061205d565b6106bc565b60405161027891906120cb565b60405180910390f35b61029b600480360381019061029691906121a5565b610742565b6040516102a89190611f64565b60405180910390f35b6102b96107f9565b005b6102c361080d565b6040516102d091906120cb565b60405180910390f35b6102e1610837565b6040516102ee919061200f565b60405180910390f35b610311600480360381019061030c91906121fe565b6108c9565b005b61032d6004803603810190610328919061205d565b6108df565b60405161033a9190611f30565b60405180910390f35b61035d60048036038101906103589190612373565b6109d7565b005b6103796004803603810190610374919061205d565b610a39565b604051610386919061200f565b60405180910390f35b6103a960048036038101906103a49190612497565b610a4b565b005b6103c560048036038101906103c091906124f3565b610ace565b6040516103d29190611f30565b60405180910390f35b6103f560048036038101906103f091906121a5565b610b62565b005b600061040282610be5565b9050919050565b60006104156008610c46565b905090565b60606000805461042990612562565b80601f016020809104026020016040519081016040528092919081815260200182805461045590612562565b80156104a25780601f10610477576101008083540402835291602001916104a2565b820191906000526020600020905b81548152906001019060200180831161048557829003601f168201915b5050505050905090565b60006104b782610c54565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610530826106bc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790612605565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105bf610c9f565b73ffffffffffffffffffffffffffffffffffffffff1614806105ee57506105ed816105e8610c9f565b610ace565b5b61062d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062490612697565b60405180910390fd5b6106378383610ca7565b505050565b61064d610647610c9f565b82610d60565b61068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390612729565b60405180910390fd5b610697838383610df5565b505050565b6106b7838383604051806020016040528060008152506109d7565b505050565b6000806106c8836110ee565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073090612795565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a990612827565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61080161112b565b61080b60006111a9565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461084690612562565b80601f016020809104026020016040519081016040528092919081815260200182805461087290612562565b80156108bf5780601f10610894576101008083540402835291602001916108bf565b820191906000526020600020905b8154815290600101906020018083116108a257829003601f168201915b5050505050905090565b6108db6108d4610c9f565b838361126f565b5050565b6000806009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b59e0526040518163ffffffff1660e01b81526004016040805180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098391906128c6565b905061098e836106bc565b73ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161480156109cf5750428160200151115b915050919050565b6109e86109e2610c9f565b83610d60565b610a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1e90612729565b60405180910390fd5b610a33848484846113db565b50505050565b6060610a4482611437565b9050919050565b6000610a576008610c46565b9050610a636008611549565b610a6d838261155f565b610a77818361157d565b336009600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610b6a61112b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd090612965565b60405180910390fd5b610be2816111a9565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c3f5750610c3e82611621565b5b9050919050565b600081600001549050919050565b610c5d81611703565b610c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9390612795565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d1a836106bc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610d6c836106bc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dae5750610dad8185610ace565b5b80610dec57508373ffffffffffffffffffffffffffffffffffffffff16610dd4846104ac565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e15826106bc565b73ffffffffffffffffffffffffffffffffffffffff1614610e6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e62906129f7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed190612a89565b60405180910390fd5b610ee78383836001611744565b8273ffffffffffffffffffffffffffffffffffffffff16610f07826106bc565b73ffffffffffffffffffffffffffffffffffffffff1614610f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f54906129f7565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46110e9838383600161174a565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611133610c9f565b73ffffffffffffffffffffffffffffffffffffffff1661115161080d565b73ffffffffffffffffffffffffffffffffffffffff16146111a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119e90612af5565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d490612b61565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516113ce9190611f30565b60405180910390a3505050565b6113e6848484610df5565b6113f284848484611750565b611431576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142890612bf3565b60405180910390fd5b50505050565b606061144282610c54565b600060066000848152602001908152602001600020805461146290612562565b80601f016020809104026020016040519081016040528092919081815260200182805461148e90612562565b80156114db5780601f106114b0576101008083540402835291602001916114db565b820191906000526020600020905b8154815290600101906020018083116114be57829003601f168201915b5050505050905060006114ec6118d7565b90506000815103611501578192505050611544565b60008251111561153657808260405160200161151e929190612c4f565b60405160208183030381529060405292505050611544565b61153f846118ee565b925050505b919050565b6001816000016000828254019250508190555050565b611579828260405180602001604052806000815250611956565b5050565b61158682611703565b6115c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bc90612ce5565b60405180910390fd5b806006600084815260200190815260200160002090816115e59190612eb1565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516116159190611f64565b60405180910390a15050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806116ec57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806116fc57506116fb826119b1565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611725836110ee565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006117718473ffffffffffffffffffffffffffffffffffffffff16611a1b565b156118ca578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261179a610c9f565b8786866040518563ffffffff1660e01b81526004016117bc9493929190612fd8565b6020604051808303816000875af19250505080156117f857506040513d601f19601f820116820180604052508101906117f59190613039565b60015b61187a573d8060008114611828576040519150601f19603f3d011682016040523d82523d6000602084013e61182d565b606091505b506000815103611872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186990612bf3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506118cf565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606118f982610c54565b60006119036118d7565b90506000815111611923576040518060200160405280600081525061194e565b8061192d84611a3e565b60405160200161193e929190612c4f565b6040516020818303038152906040525b915050919050565b6119608383611b0c565b61196d6000848484611750565b6119ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a390612bf3565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001611a4d84611d29565b01905060008167ffffffffffffffff811115611a6c57611a6b612248565b5b6040519080825280601f01601f191660200182016040528015611a9e5781602001600182028036833780820191505090505b509050600082602001820190505b600115611b01578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611af557611af4613066565b5b04945060008503611aac575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b72906130e1565b60405180910390fd5b611b8481611703565b15611bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbb9061314d565b60405180910390fd5b611bd2600083836001611744565b611bdb81611703565b15611c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c129061314d565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d2560008383600161174a565b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611d87577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611d7d57611d7c613066565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611dc4576d04ee2d6d415b85acef81000000008381611dba57611db9613066565b5b0492506020810190505b662386f26fc100008310611df357662386f26fc100008381611de957611de8613066565b5b0492506010810190505b6305f5e1008310611e1c576305f5e1008381611e1257611e11613066565b5b0492506008810190505b6127108310611e41576127108381611e3757611e36613066565b5b0492506004810190505b60648310611e645760648381611e5a57611e59613066565b5b0492506002810190505b600a8310611e73576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ec581611e90565b8114611ed057600080fd5b50565b600081359050611ee281611ebc565b92915050565b600060208284031215611efe57611efd611e86565b5b6000611f0c84828501611ed3565b91505092915050565b60008115159050919050565b611f2a81611f15565b82525050565b6000602082019050611f456000830184611f21565b92915050565b6000819050919050565b611f5e81611f4b565b82525050565b6000602082019050611f796000830184611f55565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fb9578082015181840152602081019050611f9e565b60008484015250505050565b6000601f19601f8301169050919050565b6000611fe182611f7f565b611feb8185611f8a565b9350611ffb818560208601611f9b565b61200481611fc5565b840191505092915050565b600060208201905081810360008301526120298184611fd6565b905092915050565b61203a81611f4b565b811461204557600080fd5b50565b60008135905061205781612031565b92915050565b60006020828403121561207357612072611e86565b5b600061208184828501612048565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120b58261208a565b9050919050565b6120c5816120aa565b82525050565b60006020820190506120e060008301846120bc565b92915050565b6120ef816120aa565b81146120fa57600080fd5b50565b60008135905061210c816120e6565b92915050565b6000806040838503121561212957612128611e86565b5b6000612137858286016120fd565b925050602061214885828601612048565b9150509250929050565b60008060006060848603121561216b5761216a611e86565b5b6000612179868287016120fd565b935050602061218a868287016120fd565b925050604061219b86828701612048565b9150509250925092565b6000602082840312156121bb576121ba611e86565b5b60006121c9848285016120fd565b91505092915050565b6121db81611f15565b81146121e657600080fd5b50565b6000813590506121f8816121d2565b92915050565b6000806040838503121561221557612214611e86565b5b6000612223858286016120fd565b9250506020612234858286016121e9565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61228082611fc5565b810181811067ffffffffffffffff8211171561229f5761229e612248565b5b80604052505050565b60006122b2611e7c565b90506122be8282612277565b919050565b600067ffffffffffffffff8211156122de576122dd612248565b5b6122e782611fc5565b9050602081019050919050565b82818337600083830152505050565b6000612316612311846122c3565b6122a8565b90508281526020810184848401111561233257612331612243565b5b61233d8482856122f4565b509392505050565b600082601f83011261235a5761235961223e565b5b813561236a848260208601612303565b91505092915050565b6000806000806080858703121561238d5761238c611e86565b5b600061239b878288016120fd565b94505060206123ac878288016120fd565b93505060406123bd87828801612048565b925050606085013567ffffffffffffffff8111156123de576123dd611e8b565b5b6123ea87828801612345565b91505092959194509250565b600067ffffffffffffffff82111561241157612410612248565b5b61241a82611fc5565b9050602081019050919050565b600061243a612435846123f6565b6122a8565b90508281526020810184848401111561245657612455612243565b5b6124618482856122f4565b509392505050565b600082601f83011261247e5761247d61223e565b5b813561248e848260208601612427565b91505092915050565b600080604083850312156124ae576124ad611e86565b5b60006124bc858286016120fd565b925050602083013567ffffffffffffffff8111156124dd576124dc611e8b565b5b6124e985828601612469565b9150509250929050565b6000806040838503121561250a57612509611e86565b5b6000612518858286016120fd565b9250506020612529858286016120fd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061257a57607f821691505b60208210810361258d5761258c612533565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006125ef602183611f8a565b91506125fa82612593565b604082019050919050565b6000602082019050818103600083015261261e816125e2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612681603d83611f8a565b915061268c82612625565b604082019050919050565b600060208201905081810360008301526126b081612674565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612713602d83611f8a565b915061271e826126b7565b604082019050919050565b6000602082019050818103600083015261274281612706565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061277f601883611f8a565b915061278a82612749565b602082019050919050565b600060208201905081810360008301526127ae81612772565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612811602983611f8a565b915061281c826127b5565b604082019050919050565b6000602082019050818103600083015261284081612804565b9050919050565b600080fd5b60008151905061285b816120e6565b92915050565b60008151905061287081612031565b92915050565b60006040828403121561288c5761288b612847565b5b61289660406122a8565b905060006128a68482850161284c565b60008301525060206128ba84828501612861565b60208301525092915050565b6000604082840312156128dc576128db611e86565b5b60006128ea84828501612876565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061294f602683611f8a565b915061295a826128f3565b604082019050919050565b6000602082019050818103600083015261297e81612942565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006129e1602583611f8a565b91506129ec82612985565b604082019050919050565b60006020820190508181036000830152612a10816129d4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a73602483611f8a565b9150612a7e82612a17565b604082019050919050565b60006020820190508181036000830152612aa281612a66565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612adf602083611f8a565b9150612aea82612aa9565b602082019050919050565b60006020820190508181036000830152612b0e81612ad2565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612b4b601983611f8a565b9150612b5682612b15565b602082019050919050565b60006020820190508181036000830152612b7a81612b3e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612bdd603283611f8a565b9150612be882612b81565b604082019050919050565b60006020820190508181036000830152612c0c81612bd0565b9050919050565b600081905092915050565b6000612c2982611f7f565b612c338185612c13565b9350612c43818560208601611f9b565b80840191505092915050565b6000612c5b8285612c1e565b9150612c678284612c1e565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612ccf602e83611f8a565b9150612cda82612c73565b604082019050919050565b60006020820190508181036000830152612cfe81612cc2565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d2a565b612d718683612d2a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612dae612da9612da484611f4b565b612d89565b611f4b565b9050919050565b6000819050919050565b612dc883612d93565b612ddc612dd482612db5565b848454612d37565b825550505050565b600090565b612df1612de4565b612dfc818484612dbf565b505050565b5b81811015612e2057612e15600082612de9565b600181019050612e02565b5050565b601f821115612e6557612e3681612d05565b612e3f84612d1a565b81016020851015612e4e578190505b612e62612e5a85612d1a565b830182612e01565b50505b505050565b600082821c905092915050565b6000612e8860001984600802612e6a565b1980831691505092915050565b6000612ea18383612e77565b9150826002028217905092915050565b612eba82611f7f565b67ffffffffffffffff811115612ed357612ed2612248565b5b612edd8254612562565b612ee8828285612e24565b600060209050601f831160018114612f1b5760008415612f09578287015190505b612f138582612e95565b865550612f7b565b601f198416612f2986612d05565b60005b82811015612f5157848901518255600182019150602085019450602081019050612f2c565b86831015612f6e5784890151612f6a601f891682612e77565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612faa82612f83565b612fb48185612f8e565b9350612fc4818560208601611f9b565b612fcd81611fc5565b840191505092915050565b6000608082019050612fed60008301876120bc565b612ffa60208301866120bc565b6130076040830185611f55565b81810360608301526130198184612f9f565b905095945050505050565b60008151905061303381611ebc565b92915050565b60006020828403121561304f5761304e611e86565b5b600061305d84828501613024565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006130cb602083611f8a565b91506130d682613095565b602082019050919050565b600060208201905081810360008301526130fa816130be565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613137601c83611f8a565b915061314282613101565b602082019050919050565b600060208201905081810360008301526131668161312a565b905091905056fea2646970667358221220f5a7df799ead42c44fb4606fc4e2bd793f62401d4effe9b64ba4c169a4c09c9364736f6c63430008110033",
  "devdoc": {
    "author": "Rodrigo Fernandes",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isTokenIDOwnerValid(uint256)": {
        "params": {
          "tokenId": "the ID of the NFT that is being checked"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeMint(address,string)": {
        "params": {
          "to": "the address of the renter",
          "uri": "the URI of the NFT that is being rented"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the ID of the interface that is being checked"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "the ID of the NFT that is being checked"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "An NFT that meant to mimic the metadata of an NFT that is being rented on the platform",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "count()": {
        "notice": "This function returns the number of NFTs that were minted"
      },
      "isTokenIDOwnerValid(uint256)": {
        "notice": "This function checks if the owner of the NFT is a valid renter of the rental contract that the NFT represents"
      },
      "safeMint(address,string)": {
        "notice": "This function mints an NFT with the metadata of a non-collateralized rental"
      },
      "supportsInterface(bytes4)": {
        "notice": "This function is used to check if a given interface is supported by the contract"
      },
      "tokenURI(uint256)": {
        "notice": "Get the token URI of a given NFT"
      }
    },
    "notice": "This contract is used to mint NFTs with the metadata of non-collateralized rentals. It also provides a function to check if the owner of the NFT is a valid renter of the rental contract that the NFT represents",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 166,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 168,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 172,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 176,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 180,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 186,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1217,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4863,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)1742_storage"
      },
      {
        "astId": 4867,
        "contract": "contracts/WrappedNFT.sol:WrappedNFT",
        "label": "tokenIDtoRentHolderSC",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1742_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1741,
            "contract": "contracts/WrappedNFT.sol:WrappedNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}